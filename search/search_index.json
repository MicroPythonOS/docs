{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MicroPythonOS Documentation","text":"<p>Welcome to the official documentation for MicroPythonOS, a lightweight and versatile operating system built entirely in MicroPython. Designed for microcontrollers like the ESP32 and desktop systems, MicroPythonOS offers a modern, Android-inspired interface with an app ecosystem, App Store, and Over-The-Air (OTA) updates.</p> <p></p>"},{"location":"#about-micropythonos","title":"About MicroPythonOS","text":"<p>MicroPythonOS is tailored for developers and innovators building IoT devices, smart wearables, educational tools, and more. Its key features include:</p> <ul> <li>Native MicroPython: Write apps and drivers in MicroPython for rapid development.</li> <li>Cross-Platform: Runs on ESP32 microcontrollers, Linux desktops, and potentially MacOS and Raspberry Pi.</li> <li>Modern UI: Android-like touch screen interface with gestures.</li> <li>App Ecosystem: Built-in apps and an App Store for easy expansion.</li> <li>OTA Updates: Seamless system and app updates.</li> </ul> <p>This documentation provides everything you need to get started, understand the architecture, build the system, and develop apps.</p>"},{"location":"#who-this-is-for","title":"Who This Is For","text":"<ul> <li>Developers: Learn how to install, build, and extend MicroPythonOS with new apps and features.</li> <li>Managers: Explore the system\u2019s capabilities, supported hardware, and ready-to-use features for prototyping and production.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to MicroPythonOS? Start here:</p> <ul> <li>Installation</li> <li>Supported Hardware</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Join our community to contribute to MicroPythonOS:</p> <ul> <li>GitHub Repository</li> <li>Community Chat</li> <li>Contact Us</li> </ul> <p>\u00a9 2025 MicroPythonOS. All rights reserved.</p>"},{"location":"overview/","title":"Overview","text":"<p>MicroPythonOS is a lightweight operating system written entirely in MicroPython, designed for microcontrollers like the ESP32 and desktop environments. Inspired by Android, it adopts a \"thin\" OS model where everything is an app, making it easy for developers to build and deploy applications.</p>"},{"location":"overview/#key-features","title":"Key Features","text":"<ul> <li>Cross-Platform: Runs on ESP32, Linux desktops, and potentially MacOS and Raspberry Pi.</li> <li>Touch Screen UI: Modern, gesture-based interface inspired by Android.</li> <li>App Store: Download and install apps seamlessly.</li> <li>OTA Updates: Keep the system and apps up-to-date effortlessly.</li> <li>Hardware Support: Touch screens, IMUs, cameras, and more.</li> <li>Lightweight: Optimized for resource-constrained devices with fast boot times.</li> </ul>"},{"location":"overview/#advantages","title":"Advantages","text":"<ul> <li>MicroPython Foundation: Simplifies development with a familiar Python-based language.</li> <li>Cross-Platform Compatibility: From microcontrollers to desktops, deploy anywhere.</li> <li>Resource Efficiency: Designed for low-memory and low-power devices.</li> <li>Modern Interface: Supports touch screens and gestures for intuitive interaction.</li> <li>Extensibility: Easy to add new apps and features via the App Store.</li> </ul>"},{"location":"overview/#use-cases","title":"Use Cases","text":"<p>MicroPythonOS powers a wide range of applications:</p> <ul> <li>IoT devices like smart home controllers.</li> <li>Educational tools with interactive displays.</li> <li>Decentralized payment systems using Bitcoin Lightning.</li> <li>Portable touch screen devices and smart wearables.</li> <li>Robotics with IMU and camera support.</li> <li>Rapid prototyping for DIY projects.</li> </ul>"},{"location":"overview/#screenshots","title":"Screenshots","text":"<p>Explore MicroPythonOS in action:</p> Launcher App Store WiFi Settings <p>See more screenshots</p>"},{"location":"apps/","title":"Apps","text":"<p>MicroPythonOS is built around an app-centric model, with built-in apps for core functionality and an App Store for additional apps.</p> <ul> <li>Built-in Apps: Core apps included with the OS.</li> <li>App Store: Download and install new apps.</li> </ul>"},{"location":"apps/appstore/","title":"App Store","text":"<p>The MicroPythonOS App Store allows users to download and install new apps to extend system functionality. Visit apps.micropythonos.com for available apps.</p>"},{"location":"apps/appstore/#example-apps","title":"Example Apps","text":"<ul> <li>Hello World: A sample app demonstrating basic functionality.</li> <li>Camera: Captures images and scans QR codes.</li> <li>Image Viewer: Displays images stored in <code>/data/images/</code>.</li> </ul>"},{"location":"apps/appstore/#screenshots","title":"Screenshots","text":"Camera App in App Store Hello World Installation Camera QR Code Scanner"},{"location":"apps/appstore/#developing-apps","title":"Developing Apps","text":"<p>Apps are written in MicroPython and installed in <code>/apps/</code>. See Filesystem Layout for the app directory structure.</p>"},{"location":"apps/built-in-apps/","title":"Built-in Apps","text":"<p>MicroPythonOS includes essential apps to bootstrap the system, located in <code>/builtin/apps/</code>.</p> <ul> <li>launcher: Starts apps and provides the home screen.</li> <li>wificonf: Configures WiFi connections.</li> <li>appstore: Downloads and installs new apps.</li> <li>osupdate: Manages Over-The-Air (OTA) system updates.</li> </ul>"},{"location":"apps/built-in-apps/#screenshots","title":"Screenshots","text":"Launcher WiFi Settings App Store OS Update <p>See App Store for additional apps.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Learn about the design and structure of MicroPythonOS, inspired by Android\u2019s \"thin\" OS model.</p> <ul> <li>Overview: High-level architecture and design principles.</li> <li>System Components: Key files and their roles.</li> <li>Filesystem Layout: Directory structure for apps and data.</li> </ul>"},{"location":"architecture/filesystem/","title":"Filesystem Layout","text":"<p>MicroPythonOS uses a structured filesystem to organize apps, data, and resources.</p> <ul> <li>/apps/: Directory for downloaded and installed apps.</li> <li>/apps/com.example.app1/: Installation directory for an example app.<ul> <li>MANIFEST.MF: Metadata (e.g., app name, start script).</li> <li>mipmap-mdpi/: Medium DPI images (e.g., <code>icon_64x64.bin</code> for a 64x64 pixel icon).</li> </ul> </li> <li>/builtin/: Read-only filesystem compiled into the OS, mounted at boot by <code>main.py</code>.</li> <li>/builtin/apps/: Built-in apps (e.g., <code>launcher</code>, <code>wificonf</code>, <code>appstore</code>, <code>osupdate</code>).</li> <li>/builtin/res/mipmap-mdpi/default_icon_64x64.bin: Default icon for apps without one.</li> <li>/data/: Storage for app data.</li> <li>/data/images/: Images stored by apps (e.g., camera app).</li> <li>/data/com.example.app1/: App-specific storage (e.g., <code>config.json</code>).</li> </ul> <p>This structure ensures a clear separation between system resources, apps, and user data.</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>MicroPythonOS is designed as a lightweight, app-centric operating system inspired by Android. Written entirely in MicroPython, it provides a minimal core with facilities for apps, making it easy to develop and deploy applications.</p>"},{"location":"architecture/overview/#design-principles","title":"Design Principles","text":"<ul> <li>Thin OS: The core OS handles hardware initialization, multitasking, and UI, leaving most functionality to apps.</li> <li>Everything is an App: System features like WiFi configuration and updates are implemented as apps.</li> <li>Developer-Friendly: MicroPython simplifies app development with Python-based APIs.</li> </ul>"},{"location":"architecture/overview/#key-components","title":"Key Components","text":"<ul> <li>Boot Process: Initializes hardware and mounts the filesystem.</li> <li>User Interface: Android-like touch screen UI with gestures.</li> <li>App Ecosystem: Built-in apps and an App Store for extensibility.</li> <li>OTA Updates: Seamless system and app updates.</li> </ul> <p>See System Components for details on key files and Filesystem Layout for the directory structure.</p>"},{"location":"architecture/system-components/","title":"System Components","text":"<p>MicroPythonOS consists of several core components that initialize and manage the system.</p> <ul> <li>boot.py: Initializes hardware on ESP32 microcontrollers.</li> <li>boot_unix.py: Initializes hardware on Linux desktops (and potentially MacOS).</li> <li>main.py:</li> <li>Sets up the user interface.</li> <li>Provides helper functions for apps.</li> <li>Launches the <code>launcher</code> app to start the system.</li> </ul> <p>These components work together to bootstrap the OS and provide a foundation for apps. See Filesystem Layout for where apps and data are stored.</p>"},{"location":"building/","title":"Building MicroPythonOS","text":"<p>Build MicroPythonOS for ESP32 microcontrollers or desktop environments.</p> <ul> <li>For ESP32: Build and flash for ESP32 devices.</li> <li>For Desktop: Build and run on Linux or MacOS.</li> <li>Release Checklist: Steps for creating a new release.</li> </ul>"},{"location":"building/desktop/","title":"Building for Desktop","text":"<p>MicroPythonOS can be built to run as an application on Linux desktops (fully supported) or MacOS (untested).</p>"},{"location":"building/desktop/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install dependencies (Linux):</li> </ul> <pre><code>sudo apt install libv4l-dev  # For webcam support\n</code></pre> <ul> <li>See lvgl-micropython for additional requirements.</li> <li>Clone repositories as described in Building for ESP32.</li> </ul>"},{"location":"building/desktop/#build-process","title":"Build Process","text":"<ol> <li>Navigate to the Repository:</li> </ol> <pre><code>cd ~/MicroPythonOS/MicroPythonOS\n</code></pre> <ol> <li>Build for Linux:</li> </ol> <pre><code>./scripts/build_lvgl_micropython.sh unix dev\n</code></pre> <ol> <li>Build for MacOS (untested):</li> </ol> <pre><code>./scripts/build_lvgl_micropython.sh macOS dev\n</code></pre>"},{"location":"building/desktop/#running-on-desktop","title":"Running on Desktop","text":"<ol> <li>Download a release (e.g., <code>MicroPythonOS_amd64_Linux_0.0.6</code>) or use your build.</li> <li>Run the application:</li> </ol> <pre><code>cd internal_filesystem/\n/path/to/MicroPythonOS_amd64_Linux_0.0.6 -X heapsize=32M -v -i -c \"$(cat boot_unix.py main.py)\"\n</code></pre> <ol> <li>Check <code>scripts/run_on_desktop.sh</code> for options like fullscreen or direct app launch.</li> </ol>"},{"location":"building/desktop/#notes","title":"Notes","text":"<ul> <li>Linux is fully supported; MacOS support is experimental.</li> <li>See Supported Hardware for platform details.</li> </ul>"},{"location":"building/esp32/","title":"Building for ESP32","text":"<p>Build MicroPythonOS for ESP32 microcontrollers, such as the Waveshare ESP32-S3-Touch-LCD-2.</p>"},{"location":"building/esp32/#prerequisites","title":"Prerequisites","text":"<ul> <li>Clone the required repositories:</li> </ul> <pre><code>mkdir ~/MicroPythonOS\ncd ~/MicroPythonOS\ngit clone https://github.com/MicroPythonOS/MicroPythonOS.git\ngit clone https://github.com/MicroPythonOS/freezeFS\ngit clone https://github.com/cnadler86/micropython-camera-API\necho 'include(\"~/MicroPythonOS/lvgl_micropython/build/manifest.py\")' &gt;&gt; micropython-camera-API/src/manifest.py\ngit clone https://github.com/MicroPythonOS/lvgl_micropython\ngit clone https://github.com/MicroPythonOS/secp256k1-embedded-ecdh\n</code></pre>"},{"location":"building/esp32/#build-process","title":"Build Process","text":"<ol> <li>Navigate to the Repository:</li> </ol> <pre><code>cd ~/MicroPythonOS/MicroPythonOS\n</code></pre> <ol> <li>Build for Production (includes preinstalled files):</li> </ol> <pre><code>./scripts/build_lvgl_micropython.sh esp32 prod\n</code></pre> <ol> <li>Build for Development (no preinstalled files):</li> </ol> <pre><code>./scripts/build_lvgl_micropython.sh esp32 dev\n</code></pre>"},{"location":"building/esp32/#flashing-to-esp32","title":"Flashing to ESP32","text":"<ol> <li>Put your ESP32 in bootloader mode (long-press the BOOT button if running MicroPythonOS).</li> <li>Flash the firmware:</li> </ol> <pre><code>./scripts/flash_over_usb.sh\n</code></pre> <ol> <li>For a development build, install files manually:</li> </ol> <pre><code>./scripts/install.sh\n</code></pre>"},{"location":"building/esp32/#notes","title":"Notes","text":"<ul> <li>Ensure your ESP32 is compatible (see Supported Hardware).</li> <li>Refer to Release Checklist for creating a production release.</li> </ul>"},{"location":"building/release-checklist/","title":"Release Checklist","text":"<p>Follow these steps to create a new release of MicroPythonOS.</p> <ol> <li>Update Version Numbers:</li> <li>Increment <code>CURRENT_OS_VERSION</code> in <code>internal_filesystem/lib/mpos/info.py</code>.</li> <li> <p>Update version numbers for modified apps:      <code>bash      git diff --stat 0.0.4 internal_filesystem/  # Check changes since last release      git diff 0.0.4 -- internal_filesystem/apps/*/META-INF/*  # Check app manifests      git diff 0.0.4 -- internal_filesystem/builtin/apps/*/META-INF/*  # Check built-in app manifests</code></p> </li> <li> <p>Update Changelog:</p> </li> <li> <p>Document changes in <code>CHANGELOG</code>.</p> </li> <li> <p>Commit and Tag:</p> </li> <li>Commit all changes.</li> <li> <p>Tag the main repository and external repositories (e.g., LightningPiggy):      <code>bash      git tag -a vX.Y.Z -m \"Release vX.Y.Z\"      git push --tags</code></p> </li> <li> <p>Build and Release:</p> </li> <li>Bundle apps:      <code>bash      ./scripts/bundle_apps.sh</code></li> <li>Build for production:      <code>bash      ./scripts/build_lvgl_micropython.sh esp32 prod</code></li> <li>Release to update and install servers:      <code>bash      ./scripts/release_to_updates.sh      ./scripts/release_to_install.sh</code></li> </ol>"},{"location":"building/release-checklist/#notes","title":"Notes","text":"<ul> <li>Ensure all repositories are synchronized before tagging.</li> <li>Verify builds on target hardware (see Building for ESP32).</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Get up and running with MicroPythonOS. This section covers installation and supported hardware to help you deploy the OS on your device or desktop.</p> <ul> <li>Installation: Step-by-step guide to install MicroPythonOS.</li> <li>Supported Hardware: Compatible devices and platforms.</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>MicroPythonOS can be installed on supported microcontrollers (e.g., ESP32) or desktop systems (Linux, potentially MacOS). For detailed instructions, visit install.micropythonos.com.</p>"},{"location":"getting-started/installation/#installing-on-esp32","title":"Installing on ESP32","text":"<ol> <li>Prepare the Environment:</li> </ol> <pre><code>mkdir ~/MicroPythonOS\ncd ~/MicroPythonOS\ngit clone https://github.com/MicroPythonOS/MicroPythonOS.git\ngit clone https://github.com/MicroPythonOS/freezeFS\ngit clone https://github.com/cnadler86/micropython-camera-API\necho 'include(\"~/MicroPythonOS/lvgl_micropython/build/manifest.py\")' &gt;&gt; micropython-camera-API/src/manifest.py\ngit clone https://github.com/MicroPythonOS/lvgl_micropython\ngit clone https://github.com/MicroPythonOS/secp256k1-embedded-ecdh\n</code></pre> <ol> <li>Build for ESP32:</li> </ol> <pre><code>cd ~/MicroPythonOS/MicroPythonOS\n./scripts/build_lvgl_micropython.sh esp32 prod\n</code></pre> <p>For a development build (no preinstalled files):</p> <pre><code>./scripts/build_lvgl_micropython.sh esp32 dev\n</code></pre> <ol> <li>Flash to ESP32:</li> <li>Put your ESP32 in bootloader mode (long-press the BOOT button if running MicroPythonOS).</li> <li>Flash the firmware:</li> </ol> <pre><code>./scripts/flash_over_usb.sh\n</code></pre> <ul> <li>For a development build, install files manually:</li> </ul> <pre><code>./scripts/install.sh\n</code></pre>"},{"location":"getting-started/installation/#installing-on-desktop-linuxmacos","title":"Installing on Desktop (Linux/MacOS)","text":"<ol> <li>Install Dependencies (Linux):</li> </ol> <pre><code>sudo apt install libv4l-dev  # For webcam support\n</code></pre> <p>See lvgl-micropython for additional dependencies.</p> <ol> <li>Build for Desktop:</li> </ol> <pre><code>cd ~/MicroPythonOS/MicroPythonOS\n./scripts/build_lvgl_micropython.sh unix dev\n</code></pre> <p>For MacOS (untested):</p> <pre><code>./scripts/build_lvgl_micropython.sh macOS dev\n</code></pre> <ol> <li>Run on Desktop:</li> <li>Download a release (e.g., <code>MicroPythonOS_amd64_Linux_0.0.6</code>) or use your build.</li> <li>Run:</li> </ol> <pre><code>cd internal_filesystem/\n/path/to/MicroPythonOS_amd64_Linux_0.0.6 -X heapsize=32M -v -i -c \"$(cat boot_unix.py main.py)\"\n</code></pre> <ul> <li>See <code>scripts/run_on_desktop.sh</code> for options like fullscreen or direct app launch.</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Check Supported Hardware for compatible devices.</li> <li>Explore Built-in Apps to get started with the system.</li> </ul>"},{"location":"getting-started/supported-hardware/","title":"Supported Hardware","text":"<p>MicroPythonOS runs on a variety of platforms, from microcontrollers to desktops.</p>"},{"location":"getting-started/supported-hardware/#esp32-microcontrollers","title":"ESP32 Microcontrollers","text":"<ul> <li>Waveshare ESP32-S3-Touch-LCD-2: Fully supported with touch screen capabilities.</li> <li>Product Wiki</li> </ul>"},{"location":"getting-started/supported-hardware/#desktop-computers","title":"Desktop Computers","text":"<ul> <li>Linux: Supported using SDL for display handling.</li> <li>MacOS: Should work but untested.</li> </ul>"},{"location":"getting-started/supported-hardware/#raspberry-pi","title":"Raspberry Pi","text":"<ul> <li>Raspbian/Linux-based: Should work, especially with a Linux desktop. Untested.</li> </ul>"},{"location":"getting-started/supported-hardware/#notes","title":"Notes","text":"<ul> <li>Ensure your hardware supports touch screens, IMUs, or cameras for full feature compatibility.</li> <li>Check Installation for setup instructions.</li> </ul>"}]}